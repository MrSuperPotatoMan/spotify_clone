"use client"

import './globals.css';
import 'bootstrap-icons/font/bootstrap-icons.css'
import { useEffect, useState, createContext } from "react"
import {createTheme,ThemeProvider} from '@mui/material'
import PlaybackPanel from "./components/playback/PlaybackPanel"
import Link from 'next/link';
import useContextMenu from './hooks/useContextMenu';
import useTextPopup from './hooks/useTextPopup';
 
export const metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
};
const theme = createTheme({
  palette: {
    primary: {
      main: '#1db954',
    }
  },
});
const TokenContext = createContext('')
export {TokenContext}

const contextMenu = useContextMenu()
export {contextMenu}

const textPopup = useTextPopup()
export {textPopup}

export default function RootLayout({children}: {children: React.ReactNode,}) {
  const [token,setToken] = useState('');
  const ContextMenu = useContextMenu()

  useEffect(()=>{    
    if(localStorage.code === undefined){
      const url = new URLSearchParams(window.location.search).get('code')
      if(!url){
        window.location.href = 'http://localhost:3000/api/code'
      }else{
        localStorage.code = url
        window.location.href = 'http://localhost:3000'
      }
    }else if(localStorage.access_token == undefined){
      fetch("http://localhost:3000/api/token",{
        method:"GET",
        headers:{
          code: localStorage.code
        }
      }).then(res => res.json()).then(res => {
        if(res.access_token != undefined){
          localStorage.setItem('expires',((res.expires_in * 100) + Date.now()).toString());
          localStorage.setItem('access_token',res.access_token)
          localStorage.setItem('refresh_token',res.refresh_token)
          setTimeout(refreshToken,3000000)
          setToken(res.access_token)
        }
      })
    }else if(parseInt(localStorage.getItem('expires') || '0') < Date.now()){
      refreshToken();
    }else{
      setToken(localStorage.getItem('access_token') || '')
      setTimeout(refreshToken,Date.now() - parseInt(localStorage.getItem('expires') || '0'))
    }
    
  },[])
  async function refreshToken(){
    console.log('refreshing')
    await fetch("http://localhost:3000/api/refresh",{
      method: "GET",
      headers: {
        refresh_token: localStorage.refresh_token
      }
    }).then(res => res.json()).then(res => {
      localStorage.setItem("access_token",res.access_token)
      setToken(res.access_token)
      console.log("token relodaed")
      localStorage.setItem('expires',((res.expires_in * 100) + Date.now()).toString());
      setTimeout(refreshToken,3000000)
    })
  }

  return (
    <html lang='en'>
      <head>
        <title>Spootify</title>
      </head>
      <body className='bg-base-gray text-gray-100'>
        <ThemeProvider theme={theme}>
          {contextMenu.Element}
          {textPopup.Element}
          <div className="grid grid-cols-1 sm:grid-cols-[12em_auto] grid-rows-[auto_8em] overflow-hidden h-screen">
            <nav className={"flex-col justify-between shadow-[0_-10px_10px_1px_black] p-1 text-xl hidden sm:flex" }>
              <div className='flex flex-col'>
                <Link href={'/'} className={"hover:text-primary transition-colors m-3"}>
                  <i className={"bi-house"}> </i>Home
                </Link>
                <Link href={'search'} className={"hover:text-primary transition-colors m-3"}>
                  <i className={"bi-search"}> </i>Search
                </Link>
                <hr/>
                <Link href={'albums'} className={"hover:text-primary transition-colors m-3"}>
                  <i className={"bi-vinyl"}> </i>Albums
                </Link>
                <Link href={'playlists'} className={"hover:text-primary transition-colors m-3"}>
                  <i className={"bi-music-note-list"}> </i>Playlists
                </Link>
                <Link href={'artists'} className={"hover:text-primary transition-colors m-3"}>
                  <i className={"bi-people"}> </i>Artists
                </Link>
                <Link href={'tracks'} className={"hover:text-primary transition-colors m-3"}>
                  <i className={"bi-music-note-beamed"}> </i>Tracks
                </Link>
              </div>
              <button className='text-left m-3'>
                <i className='bi-gear'> </i>Options
              </button>
            </nav>
            <TokenContext.Provider value={token}>
              <div className="overflow-hidden [&>div]:overflow-auto [&>div]:overflow-x-hidden [&>div]:h-full">
                  {token && children}
              </div>
              {token && <PlaybackPanel token={token}/>}
            </TokenContext.Provider>
          </div>
        </ThemeProvider>
      </body>
    </html>
  );
} 

//[x] devices
//[] show current playback context and next songs
//[] searching in albums/ playlists/ artists/ tracks
//[] category filters in artist (all/albums/singles)
//[] podcasts
//[] recommendations
//[] play songs from song list
//[] responsive design
//[] context menu when right click
// [] options at the end of nav